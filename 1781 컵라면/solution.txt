const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
class maxHeap {
  constructor() {
    this.heap = [null];
  }
  push(val) {
    this.heap.push(val);
    let cur = this.heap.length - 1;
    let pa = Math.floor(cur / 2);

    while (pa != 0 && this.heap[cur] < this.heap[pa]) {
      [this.heap[cur], this.heap[pa]] = [this.heap[pa], this.heap[cur]];
      cur = pa;
      pa = Math.floor(cur / 2);
    }
  }
  pop() {
    if (this.heap.length == 1) return;
    if (this.heap.length == 2) return this.heap.pop();

    const val = this.heap[1];
    this.heap[1] = this.heap.pop();
    let cur = 1;
    let left = 2;
    let right = 3;

    while (
      (this.heap[left] && this.heap[cur] > this.heap[left]) ||
      (this.heap[right] && this.heap[cur] > this.heap[right])
    ) {
      if (this.heap[left] == undefined) {
        [this.heap[cur], this.heap[right]] = [this.heap[right], this.heap[cur]];
      } else if (this.heap[right] == undefined) {
        [this.heap[cur], this.heap[left]] = [this.heap[left], this.heap[cur]];
      } else if (this.heap[left] > this.heap[right]) {
        [this.heap[cur], this.heap[right]] = [this.heap[right], this.heap[cur]];
        cur = right;
      } else if (this.heap[left] <= this.heap[right]) {
        [this.heap[cur], this.heap[left]] = [this.heap[left], this.heap[cur]];
        cur = left;
      }
      left = cur * 2;
      right = cur * 2 + 1;
    }
    return val;
  }
}
const input = [];
rl.on("line", (line) => {
  input.push(line);
}).on("close", () => {
  const n = Number(input[0]);
  const arr = [];
  for (let i = 1; i <= n; i++) {
    const [d, num] = input[i].split(" ").map(Number);
    arr.push([d, num]);
  }
  arr.sort((a, b) => a[0] - b[0]);
  const pq = new maxHeap();
  for (let i = 0; i < n; i++) {
    pq.push(arr[i][1]);
    while (pq.heap.length - 1 > arr[i][0]) {
      pq.pop();
    }
  }
  console.log(pq.heap.reduce((a, b) => a + b, 0));
});
